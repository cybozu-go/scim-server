// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim-server/ent/entitlement"
	"github.com/cybozu-go/scim-server/ent/user"
	"github.com/google/uuid"
)

// EntitlementCreate is the builder for creating a Entitlement entity.
type EntitlementCreate struct {
	config
	mutation *EntitlementMutation
	hooks    []Hook
}

// SetDisplay sets the "display" field.
func (ec *EntitlementCreate) SetDisplay(s string) *EntitlementCreate {
	ec.mutation.SetDisplay(s)
	return ec
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableDisplay(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetDisplay(*s)
	}
	return ec
}

// SetPrimary sets the "primary" field.
func (ec *EntitlementCreate) SetPrimary(b bool) *EntitlementCreate {
	ec.mutation.SetPrimary(b)
	return ec
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillablePrimary(b *bool) *EntitlementCreate {
	if b != nil {
		ec.SetPrimary(*b)
	}
	return ec
}

// SetType sets the "type" field.
func (ec *EntitlementCreate) SetType(s string) *EntitlementCreate {
	ec.mutation.SetType(s)
	return ec
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableType(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetType(*s)
	}
	return ec
}

// SetValue sets the "value" field.
func (ec *EntitlementCreate) SetValue(s string) *EntitlementCreate {
	ec.mutation.SetValue(s)
	return ec
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableValue(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetValue(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EntitlementCreate) SetID(u uuid.UUID) *EntitlementCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableID(u *uuid.UUID) *EntitlementCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *EntitlementCreate) SetUserID(id uuid.UUID) *EntitlementCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUserID(id *uuid.UUID) *EntitlementCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EntitlementCreate) SetUser(u *User) *EntitlementCreate {
	return ec.SetUserID(u.ID)
}

// Mutation returns the EntitlementMutation object of the builder.
func (ec *EntitlementCreate) Mutation() *EntitlementMutation {
	return ec.mutation
}

// Save creates the Entitlement in the database.
func (ec *EntitlementCreate) Save(ctx context.Context) (*Entitlement, error) {
	var (
		err  error
		node *Entitlement
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntitlementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Entitlement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntitlementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntitlementCreate) SaveX(ctx context.Context) *Entitlement {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntitlementCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntitlementCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntitlementCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := entitlement.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntitlementCreate) check() error {
	return nil
}

func (ec *EntitlementCreate) sqlSave(ctx context.Context) (*Entitlement, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ec *EntitlementCreate) createSpec() (*Entitlement, *sqlgraph.CreateSpec) {
	var (
		_node = &Entitlement{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entitlement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entitlement.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Display(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitlement.FieldDisplay,
		})
		_node.Display = value
	}
	if value, ok := ec.mutation.Primary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entitlement.FieldPrimary,
		})
		_node.Primary = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitlement.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ec.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitlement.FieldValue,
		})
		_node.Value = value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.UserTable,
			Columns: []string{entitlement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_entitlements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntitlementCreateBulk is the builder for creating many Entitlement entities in bulk.
type EntitlementCreateBulk struct {
	config
	builders []*EntitlementCreate
}

// Save creates the Entitlement entities in the database.
func (ecb *EntitlementCreateBulk) Save(ctx context.Context) ([]*Entitlement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entitlement, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) SaveX(ctx context.Context) []*Entitlement {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntitlementCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
