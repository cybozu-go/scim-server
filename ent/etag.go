// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hash"
)

func (a *Address) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Country")
	fmt.Fprint(h, a.Country)
	fmt.Fprint(h, "Formatted")
	fmt.Fprint(h, a.Formatted)
	fmt.Fprint(h, "Locality")
	fmt.Fprint(h, a.Locality)
	fmt.Fprint(h, "PostalCode")
	fmt.Fprint(h, a.PostalCode)
	fmt.Fprint(h, "Region")
	fmt.Fprint(h, a.Region)
	fmt.Fprint(h, "StreetAddress")
	fmt.Fprint(h, a.StreetAddress)
	return nil
}
func (e *Email) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, e.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, e.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, e.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, e.Value)
	return nil
}
func (e *Entitlement) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, e.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, e.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, e.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, e.Value)
	return nil
}
func (gr *Group) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "DisplayName")
	fmt.Fprint(h, gr.DisplayName)
	fmt.Fprint(h, "ExternalID")
	fmt.Fprint(h, gr.ExternalID)
	if v := gr.Edges.Members; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	return nil
}
func (gm *GroupMember) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, gm.Value)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, gm.Type)
	fmt.Fprint(h, "Ref")
	fmt.Fprint(h, gm.Ref)
	return nil
}
func (i *IMS) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, i.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, i.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, i.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, i.Value)
	return nil
}
func (n *Names) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "FamilyName")
	fmt.Fprint(h, n.FamilyName)
	fmt.Fprint(h, "Formatted")
	fmt.Fprint(h, n.Formatted)
	fmt.Fprint(h, "GivenName")
	fmt.Fprint(h, n.GivenName)
	fmt.Fprint(h, "HonorificPrefix")
	fmt.Fprint(h, n.HonorificPrefix)
	fmt.Fprint(h, "HonorificSuffix")
	fmt.Fprint(h, n.HonorificSuffix)
	fmt.Fprint(h, "MiddleName")
	fmt.Fprint(h, n.MiddleName)
	return nil
}
func (pn *PhoneNumber) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, pn.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, pn.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, pn.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, pn.Value)
	return nil
}
func (ph *Photo) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, ph.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, ph.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, ph.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, ph.Value)
	return nil
}
func (r *Role) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, r.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, r.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, r.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, r.Value)
	return nil
}
func (u *User) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Active")
	fmt.Fprint(h, u.Active)
	fmt.Fprint(h, "DisplayName")
	fmt.Fprint(h, u.DisplayName)
	fmt.Fprint(h, "ExternalID")
	fmt.Fprint(h, u.ExternalID)
	fmt.Fprint(h, "Locale")
	fmt.Fprint(h, u.Locale)
	fmt.Fprint(h, "NickName")
	fmt.Fprint(h, u.NickName)
	fmt.Fprint(h, "PreferredLanguage")
	fmt.Fprint(h, u.PreferredLanguage)
	fmt.Fprint(h, "ProfileURL")
	fmt.Fprint(h, u.ProfileURL)
	fmt.Fprint(h, "Timezone")
	fmt.Fprint(h, u.Timezone)
	fmt.Fprint(h, "Title")
	fmt.Fprint(h, u.Title)
	fmt.Fprint(h, "UserName")
	fmt.Fprint(h, u.UserName)
	fmt.Fprint(h, "UserType")
	fmt.Fprint(h, u.UserType)
	if v := u.Edges.Addresses; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.Groups; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.Emails; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.Name; v != nil {
		v.ComputeETag(h)
	}
	if v := u.Edges.Entitlements; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.Roles; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.IMS; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.PhoneNumbers; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.Photos; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	if v := u.Edges.X509Certificates; v != nil {
		for _, e := range v {
			e.ComputeETag(h)
		}
	}
	return nil
}
func (x *X509Certificate) ComputeETag(h hash.Hash) error {
	fmt.Fprint(h, "Display")
	fmt.Fprint(h, x.Display)
	fmt.Fprint(h, "Primary")
	fmt.Fprint(h, x.Primary)
	fmt.Fprint(h, "Type")
	fmt.Fprint(h, x.Type)
	fmt.Fprint(h, "Value")
	fmt.Fprint(h, x.Value)
	return nil
}
