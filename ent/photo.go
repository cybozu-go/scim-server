// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cybozu-go/scim-server/ent/photo"
	"github.com/cybozu-go/scim-server/ent/user"
	"github.com/google/uuid"
)

// Photo is the model entity for the Photo schema.
type Photo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Display holds the value of the "display" field.
	Display string `json:"display,omitempty"`
	// Primary holds the value of the "primary" field.
	Primary bool `json:"primary,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhotoQuery when eager-loading is set.
	Edges       PhotoEdges `json:"edges"`
	user_photos *uuid.UUID
}

// PhotoEdges holds the relations/edges for other nodes in the graph.
type PhotoEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhotoEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Photo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case photo.FieldPrimary:
			values[i] = new(sql.NullBool)
		case photo.FieldDisplay, photo.FieldType, photo.FieldValue:
			values[i] = new(sql.NullString)
		case photo.FieldID:
			values[i] = new(uuid.UUID)
		case photo.ForeignKeys[0]: // user_photos
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Photo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Photo fields.
func (ph *Photo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case photo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ph.ID = *value
			}
		case photo.FieldDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				ph.Display = value.String
			}
		case photo.FieldPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field primary", values[i])
			} else if value.Valid {
				ph.Primary = value.Bool
			}
		case photo.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ph.Type = value.String
			}
		case photo.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ph.Value = value.String
			}
		case photo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_photos", values[i])
			} else if value.Valid {
				ph.user_photos = new(uuid.UUID)
				*ph.user_photos = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Photo entity.
func (ph *Photo) QueryUser() *UserQuery {
	return (&PhotoClient{config: ph.config}).QueryUser(ph)
}

// Update returns a builder for updating this Photo.
// Note that you need to call Photo.Unwrap() before calling this method if this Photo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Photo) Update() *PhotoUpdateOne {
	return (&PhotoClient{config: ph.config}).UpdateOne(ph)
}

// Unwrap unwraps the Photo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *Photo) Unwrap() *Photo {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Photo is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Photo) String() string {
	var builder strings.Builder
	builder.WriteString("Photo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	builder.WriteString("display=")
	builder.WriteString(ph.Display)
	builder.WriteString(", ")
	builder.WriteString("primary=")
	builder.WriteString(fmt.Sprintf("%v", ph.Primary))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ph.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ph.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Photos is a parsable slice of Photo.
type Photos []*Photo

func (ph Photos) config(cfg config) {
	for _i := range ph {
		ph[_i].config = cfg
	}
}
