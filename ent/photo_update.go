// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim-server/ent/photo"
	"github.com/cybozu-go/scim-server/ent/predicate"
	"github.com/cybozu-go/scim-server/ent/user"
	"github.com/google/uuid"
)

// PhotoUpdate is the builder for updating Photo entities.
type PhotoUpdate struct {
	config
	hooks    []Hook
	mutation *PhotoMutation
}

// Where appends a list predicates to the PhotoUpdate builder.
func (pu *PhotoUpdate) Where(ps ...predicate.Photo) *PhotoUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDisplay sets the "display" field.
func (pu *PhotoUpdate) SetDisplay(s string) *PhotoUpdate {
	pu.mutation.SetDisplay(s)
	return pu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableDisplay(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetDisplay(*s)
	}
	return pu
}

// ClearDisplay clears the value of the "display" field.
func (pu *PhotoUpdate) ClearDisplay() *PhotoUpdate {
	pu.mutation.ClearDisplay()
	return pu
}

// SetPrimary sets the "primary" field.
func (pu *PhotoUpdate) SetPrimary(b bool) *PhotoUpdate {
	pu.mutation.SetPrimary(b)
	return pu
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillablePrimary(b *bool) *PhotoUpdate {
	if b != nil {
		pu.SetPrimary(*b)
	}
	return pu
}

// ClearPrimary clears the value of the "primary" field.
func (pu *PhotoUpdate) ClearPrimary() *PhotoUpdate {
	pu.mutation.ClearPrimary()
	return pu
}

// SetType sets the "type" field.
func (pu *PhotoUpdate) SetType(s string) *PhotoUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableType(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// ClearType clears the value of the "type" field.
func (pu *PhotoUpdate) ClearType() *PhotoUpdate {
	pu.mutation.ClearType()
	return pu
}

// SetValue sets the "value" field.
func (pu *PhotoUpdate) SetValue(s string) *PhotoUpdate {
	pu.mutation.SetValue(s)
	return pu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (pu *PhotoUpdate) SetNillableValue(s *string) *PhotoUpdate {
	if s != nil {
		pu.SetValue(*s)
	}
	return pu
}

// ClearValue clears the value of the "value" field.
func (pu *PhotoUpdate) ClearValue() *PhotoUpdate {
	pu.mutation.ClearValue()
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PhotoUpdate) SetUserID(id uuid.UUID) *PhotoUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PhotoUpdate) SetNillableUserID(id *uuid.UUID) *PhotoUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PhotoUpdate) SetUser(u *User) *PhotoUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PhotoMutation object of the builder.
func (pu *PhotoUpdate) Mutation() *PhotoMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PhotoUpdate) ClearUser() *PhotoUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PhotoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhotoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PhotoUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PhotoUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PhotoUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PhotoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   photo.Table,
			Columns: photo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: photo.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photo.FieldDisplay,
		})
	}
	if pu.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photo.FieldDisplay,
		})
	}
	if value, ok := pu.mutation.Primary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: photo.FieldPrimary,
		})
	}
	if pu.mutation.PrimaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: photo.FieldPrimary,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photo.FieldType,
		})
	}
	if pu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photo.FieldType,
		})
	}
	if value, ok := pu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photo.FieldValue,
		})
	}
	if pu.mutation.ValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photo.FieldValue,
		})
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PhotoUpdateOne is the builder for updating a single Photo entity.
type PhotoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhotoMutation
}

// SetDisplay sets the "display" field.
func (puo *PhotoUpdateOne) SetDisplay(s string) *PhotoUpdateOne {
	puo.mutation.SetDisplay(s)
	return puo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableDisplay(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetDisplay(*s)
	}
	return puo
}

// ClearDisplay clears the value of the "display" field.
func (puo *PhotoUpdateOne) ClearDisplay() *PhotoUpdateOne {
	puo.mutation.ClearDisplay()
	return puo
}

// SetPrimary sets the "primary" field.
func (puo *PhotoUpdateOne) SetPrimary(b bool) *PhotoUpdateOne {
	puo.mutation.SetPrimary(b)
	return puo
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillablePrimary(b *bool) *PhotoUpdateOne {
	if b != nil {
		puo.SetPrimary(*b)
	}
	return puo
}

// ClearPrimary clears the value of the "primary" field.
func (puo *PhotoUpdateOne) ClearPrimary() *PhotoUpdateOne {
	puo.mutation.ClearPrimary()
	return puo
}

// SetType sets the "type" field.
func (puo *PhotoUpdateOne) SetType(s string) *PhotoUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableType(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// ClearType clears the value of the "type" field.
func (puo *PhotoUpdateOne) ClearType() *PhotoUpdateOne {
	puo.mutation.ClearType()
	return puo
}

// SetValue sets the "value" field.
func (puo *PhotoUpdateOne) SetValue(s string) *PhotoUpdateOne {
	puo.mutation.SetValue(s)
	return puo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableValue(s *string) *PhotoUpdateOne {
	if s != nil {
		puo.SetValue(*s)
	}
	return puo
}

// ClearValue clears the value of the "value" field.
func (puo *PhotoUpdateOne) ClearValue() *PhotoUpdateOne {
	puo.mutation.ClearValue()
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PhotoUpdateOne) SetUserID(id uuid.UUID) *PhotoUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PhotoUpdateOne) SetNillableUserID(id *uuid.UUID) *PhotoUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PhotoUpdateOne) SetUser(u *User) *PhotoUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PhotoMutation object of the builder.
func (puo *PhotoUpdateOne) Mutation() *PhotoMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PhotoUpdateOne) ClearUser() *PhotoUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PhotoUpdateOne) Select(field string, fields ...string) *PhotoUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Photo entity.
func (puo *PhotoUpdateOne) Save(ctx context.Context) (*Photo, error) {
	var (
		err  error
		node *Photo
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhotoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Photo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PhotoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PhotoUpdateOne) SaveX(ctx context.Context) *Photo {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PhotoUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PhotoUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PhotoUpdateOne) sqlSave(ctx context.Context) (_node *Photo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   photo.Table,
			Columns: photo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: photo.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Photo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photo.FieldID)
		for _, f := range fields {
			if !photo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != photo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photo.FieldDisplay,
		})
	}
	if puo.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photo.FieldDisplay,
		})
	}
	if value, ok := puo.mutation.Primary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: photo.FieldPrimary,
		})
	}
	if puo.mutation.PrimaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: photo.FieldPrimary,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photo.FieldType,
		})
	}
	if puo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photo.FieldType,
		})
	}
	if value, ok := puo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photo.FieldValue,
		})
	}
	if puo.mutation.ValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photo.FieldValue,
		})
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photo.UserTable,
			Columns: []string{photo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Photo{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
