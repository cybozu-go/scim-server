// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cybozu-go/scim-server/ent/names"
	"github.com/cybozu-go/scim-server/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// DisplayName holds the value of the "displayName" field.
	DisplayName string `json:"displayName,omitempty"`
	// ExternalID holds the value of the "externalID" field.
	ExternalID string `json:"externalID,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// Names holds the value of the "names" field.
	Names uuid.UUID `json:"names,omitempty"`
	// NickName holds the value of the "nickName" field.
	NickName string `json:"nickName,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// PreferredLanguage holds the value of the "preferredLanguage" field.
	PreferredLanguage string `json:"preferredLanguage,omitempty"`
	// ProfileURL holds the value of the "profileURL" field.
	ProfileURL string `json:"profileURL,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// UserType holds the value of the "userType" field.
	UserType string `json:"userType,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`

	// Groups contain the membership information about the groups that
	// this user directly or indirectly is part of. The membership
	// information _may_ be cached, and may take some time before
	// it is synchronized
	Groups []*Membership `json:"groups,omitempty"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Addresses holds the value of the addresses edge.
	Addresses []*Address `json:"addresses,omitempty"`
	// Emails holds the value of the emails edge.
	Emails []*Email `json:"emails,omitempty"`
	// Name holds the value of the name edge.
	Name *Names `json:"name,omitempty"`
	// Entitlements holds the value of the entitlements edge.
	Entitlements []*Entitlement `json:"entitlements,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// IMS holds the value of the IMS edge.
	IMS []*IMS `json:"IMS,omitempty"`
	// PhoneNumbers holds the value of the phone_numbers edge.
	PhoneNumbers []*PhoneNumber `json:"phone_numbers,omitempty"`
	// Photos holds the value of the photos edge.
	Photos []*Photo `json:"photos,omitempty"`
	// X509Certificates holds the value of the x509_certificates edge.
	X509Certificates []*X509Certificate `json:"x509_certificates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// AddressesOrErr returns the Addresses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[0] {
		return e.Addresses, nil
	}
	return nil, &NotLoadedError{edge: "addresses"}
}

// EmailsOrErr returns the Emails value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EmailsOrErr() ([]*Email, error) {
	if e.loadedTypes[1] {
		return e.Emails, nil
	}
	return nil, &NotLoadedError{edge: "emails"}
}

// NameOrErr returns the Name value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) NameOrErr() (*Names, error) {
	if e.loadedTypes[2] {
		if e.Name == nil {
			// The edge name was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: names.Label}
		}
		return e.Name, nil
	}
	return nil, &NotLoadedError{edge: "name"}
}

// EntitlementsOrErr returns the Entitlements value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EntitlementsOrErr() ([]*Entitlement, error) {
	if e.loadedTypes[3] {
		return e.Entitlements, nil
	}
	return nil, &NotLoadedError{edge: "entitlements"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[4] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// IMSOrErr returns the IMS value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) IMSOrErr() ([]*IMS, error) {
	if e.loadedTypes[5] {
		return e.IMS, nil
	}
	return nil, &NotLoadedError{edge: "IMS"}
}

// PhoneNumbersOrErr returns the PhoneNumbers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PhoneNumbersOrErr() ([]*PhoneNumber, error) {
	if e.loadedTypes[6] {
		return e.PhoneNumbers, nil
	}
	return nil, &NotLoadedError{edge: "phone_numbers"}
}

// PhotosOrErr returns the Photos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PhotosOrErr() ([]*Photo, error) {
	if e.loadedTypes[7] {
		return e.Photos, nil
	}
	return nil, &NotLoadedError{edge: "photos"}
}

// X509CertificatesOrErr returns the X509Certificates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) X509CertificatesOrErr() ([]*X509Certificate, error) {
	if e.loadedTypes[8] {
		return e.X509Certificates, nil
	}
	return nil, &NotLoadedError{edge: "x509_certificates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldActive:
			values[i] = new(sql.NullBool)
		case user.FieldDisplayName, user.FieldExternalID, user.FieldLocale, user.FieldNickName, user.FieldPassword, user.FieldPreferredLanguage, user.FieldProfileURL, user.FieldTimezone, user.FieldTitle, user.FieldUserName, user.FieldUserType, user.FieldEtag:
			values[i] = new(sql.NullString)
		case user.FieldID, user.FieldNames:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				u.Active = value.Bool
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field displayName", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field externalID", values[i])
			} else if value.Valid {
				u.ExternalID = value.String
			}
		case user.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				u.Locale = value.String
			}
		case user.FieldNames:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field names", values[i])
			} else if value != nil {
				u.Names = *value
			}
		case user.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickName", values[i])
			} else if value.Valid {
				u.NickName = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldPreferredLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preferredLanguage", values[i])
			} else if value.Valid {
				u.PreferredLanguage = value.String
			}
		case user.FieldProfileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profileURL", values[i])
			} else if value.Valid {
				u.ProfileURL = value.String
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				u.Timezone = value.String
			}
		case user.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				u.Title = value.String
			}
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldUserType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userType", values[i])
			} else if value.Valid {
				u.UserType = value.String
			}
		case user.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				u.Etag = value.String
			}
		}
	}
	return nil
}

// QueryAddresses queries the "addresses" edge of the User entity.
func (u *User) QueryAddresses() *AddressQuery {
	return (&UserClient{config: u.config}).QueryAddresses(u)
}

// QueryEmails queries the "emails" edge of the User entity.
func (u *User) QueryEmails() *EmailQuery {
	return (&UserClient{config: u.config}).QueryEmails(u)
}

// QueryName queries the "name" edge of the User entity.
func (u *User) QueryName() *NamesQuery {
	return (&UserClient{config: u.config}).QueryName(u)
}

// QueryEntitlements queries the "entitlements" edge of the User entity.
func (u *User) QueryEntitlements() *EntitlementQuery {
	return (&UserClient{config: u.config}).QueryEntitlements(u)
}

// QueryRoles queries the "roles" edge of the User entity.
func (u *User) QueryRoles() *RoleQuery {
	return (&UserClient{config: u.config}).QueryRoles(u)
}

// QueryIMS queries the "IMS" edge of the User entity.
func (u *User) QueryIMS() *IMSQuery {
	return (&UserClient{config: u.config}).QueryIMS(u)
}

// QueryPhoneNumbers queries the "phone_numbers" edge of the User entity.
func (u *User) QueryPhoneNumbers() *PhoneNumberQuery {
	return (&UserClient{config: u.config}).QueryPhoneNumbers(u)
}

// QueryPhotos queries the "photos" edge of the User entity.
func (u *User) QueryPhotos() *PhotoQuery {
	return (&UserClient{config: u.config}).QueryPhotos(u)
}

// QueryX509Certificates queries the "x509_certificates" edge of the User entity.
func (u *User) QueryX509Certificates() *X509CertificateQuery {
	return (&UserClient{config: u.config}).QueryX509Certificates(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", u.Active))
	builder.WriteString(", ")
	builder.WriteString("displayName=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("externalID=")
	builder.WriteString(u.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(u.Locale)
	builder.WriteString(", ")
	builder.WriteString("names=")
	builder.WriteString(fmt.Sprintf("%v", u.Names))
	builder.WriteString(", ")
	builder.WriteString("nickName=")
	builder.WriteString(u.NickName)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("preferredLanguage=")
	builder.WriteString(u.PreferredLanguage)
	builder.WriteString(", ")
	builder.WriteString("profileURL=")
	builder.WriteString(u.ProfileURL)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(u.Timezone)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(u.Title)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(u.UserName)
	builder.WriteString(", ")
	builder.WriteString("userType=")
	builder.WriteString(u.UserType)
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(u.Etag)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
