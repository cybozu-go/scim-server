// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cybozu-go/scim-server/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// Formatted applies equality check predicate on the "formatted" field. It's identical to FormattedEQ.
func Formatted(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormatted), v))
	})
}

// Locality applies equality check predicate on the "locality" field. It's identical to LocalityEQ.
func Locality(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocality), v))
	})
}

// PostalCode applies equality check predicate on the "postalCode" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// StreetAddress applies equality check predicate on the "streetAddress" field. It's identical to StreetAddressEQ.
func StreetAddress(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCountry)))
	})
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCountry)))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// FormattedEQ applies the EQ predicate on the "formatted" field.
func FormattedEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormatted), v))
	})
}

// FormattedNEQ applies the NEQ predicate on the "formatted" field.
func FormattedNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormatted), v))
	})
}

// FormattedIn applies the In predicate on the "formatted" field.
func FormattedIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormatted), v...))
	})
}

// FormattedNotIn applies the NotIn predicate on the "formatted" field.
func FormattedNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormatted), v...))
	})
}

// FormattedGT applies the GT predicate on the "formatted" field.
func FormattedGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormatted), v))
	})
}

// FormattedGTE applies the GTE predicate on the "formatted" field.
func FormattedGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormatted), v))
	})
}

// FormattedLT applies the LT predicate on the "formatted" field.
func FormattedLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormatted), v))
	})
}

// FormattedLTE applies the LTE predicate on the "formatted" field.
func FormattedLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormatted), v))
	})
}

// FormattedContains applies the Contains predicate on the "formatted" field.
func FormattedContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFormatted), v))
	})
}

// FormattedHasPrefix applies the HasPrefix predicate on the "formatted" field.
func FormattedHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFormatted), v))
	})
}

// FormattedHasSuffix applies the HasSuffix predicate on the "formatted" field.
func FormattedHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFormatted), v))
	})
}

// FormattedIsNil applies the IsNil predicate on the "formatted" field.
func FormattedIsNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFormatted)))
	})
}

// FormattedNotNil applies the NotNil predicate on the "formatted" field.
func FormattedNotNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFormatted)))
	})
}

// FormattedEqualFold applies the EqualFold predicate on the "formatted" field.
func FormattedEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFormatted), v))
	})
}

// FormattedContainsFold applies the ContainsFold predicate on the "formatted" field.
func FormattedContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFormatted), v))
	})
}

// LocalityEQ applies the EQ predicate on the "locality" field.
func LocalityEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocality), v))
	})
}

// LocalityNEQ applies the NEQ predicate on the "locality" field.
func LocalityNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocality), v))
	})
}

// LocalityIn applies the In predicate on the "locality" field.
func LocalityIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocality), v...))
	})
}

// LocalityNotIn applies the NotIn predicate on the "locality" field.
func LocalityNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocality), v...))
	})
}

// LocalityGT applies the GT predicate on the "locality" field.
func LocalityGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocality), v))
	})
}

// LocalityGTE applies the GTE predicate on the "locality" field.
func LocalityGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocality), v))
	})
}

// LocalityLT applies the LT predicate on the "locality" field.
func LocalityLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocality), v))
	})
}

// LocalityLTE applies the LTE predicate on the "locality" field.
func LocalityLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocality), v))
	})
}

// LocalityContains applies the Contains predicate on the "locality" field.
func LocalityContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocality), v))
	})
}

// LocalityHasPrefix applies the HasPrefix predicate on the "locality" field.
func LocalityHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocality), v))
	})
}

// LocalityHasSuffix applies the HasSuffix predicate on the "locality" field.
func LocalityHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocality), v))
	})
}

// LocalityIsNil applies the IsNil predicate on the "locality" field.
func LocalityIsNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocality)))
	})
}

// LocalityNotNil applies the NotNil predicate on the "locality" field.
func LocalityNotNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocality)))
	})
}

// LocalityEqualFold applies the EqualFold predicate on the "locality" field.
func LocalityEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocality), v))
	})
}

// LocalityContainsFold applies the ContainsFold predicate on the "locality" field.
func LocalityContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocality), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "postalCode" field.
func PostalCodeEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "postalCode" field.
func PostalCodeNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "postalCode" field.
func PostalCodeIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "postalCode" field.
func PostalCodeNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "postalCode" field.
func PostalCodeGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "postalCode" field.
func PostalCodeGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "postalCode" field.
func PostalCodeLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "postalCode" field.
func PostalCodeLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContains applies the Contains predicate on the "postalCode" field.
func PostalCodeContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postalCode" field.
func PostalCodeHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postalCode" field.
func PostalCodeHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIsNil applies the IsNil predicate on the "postalCode" field.
func PostalCodeIsNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPostalCode)))
	})
}

// PostalCodeNotNil applies the NotNil predicate on the "postalCode" field.
func PostalCodeNotNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPostalCode)))
	})
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postalCode" field.
func PostalCodeEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postalCode" field.
func PostalCodeContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostalCode), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

// RegionIsNil applies the IsNil predicate on the "region" field.
func RegionIsNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegion)))
	})
}

// RegionNotNil applies the NotNil predicate on the "region" field.
func RegionNotNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegion)))
	})
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// StreetAddressEQ applies the EQ predicate on the "streetAddress" field.
func StreetAddressEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressNEQ applies the NEQ predicate on the "streetAddress" field.
func StreetAddressNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIn applies the In predicate on the "streetAddress" field.
func StreetAddressIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressNotIn applies the NotIn predicate on the "streetAddress" field.
func StreetAddressNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressGT applies the GT predicate on the "streetAddress" field.
func StreetAddressGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressGTE applies the GTE predicate on the "streetAddress" field.
func StreetAddressGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLT applies the LT predicate on the "streetAddress" field.
func StreetAddressLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLTE applies the LTE predicate on the "streetAddress" field.
func StreetAddressLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContains applies the Contains predicate on the "streetAddress" field.
func StreetAddressContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasPrefix applies the HasPrefix predicate on the "streetAddress" field.
func StreetAddressHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasSuffix applies the HasSuffix predicate on the "streetAddress" field.
func StreetAddressHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIsNil applies the IsNil predicate on the "streetAddress" field.
func StreetAddressIsNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStreetAddress)))
	})
}

// StreetAddressNotNil applies the NotNil predicate on the "streetAddress" field.
func StreetAddressNotNil() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStreetAddress)))
	})
}

// StreetAddressEqualFold applies the EqualFold predicate on the "streetAddress" field.
func StreetAddressEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContainsFold applies the ContainsFold predicate on the "streetAddress" field.
func StreetAddressContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreetAddress), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		p(s.Not())
	})
}
