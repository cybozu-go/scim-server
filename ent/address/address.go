// Code generated by entc, DO NOT EDIT.

package address

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldFormatted holds the string denoting the formatted field in the database.
	FieldFormatted = "formatted"
	// FieldLocality holds the string denoting the locality field in the database.
	FieldLocality = "locality"
	// FieldPostalCode holds the string denoting the postalcode field in the database.
	FieldPostalCode = "postal_code"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldStreetAddress holds the string denoting the streetaddress field in the database.
	FieldStreetAddress = "street_address"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "addresses"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_addresses"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldCountry,
	FieldFormatted,
	FieldLocality,
	FieldPostalCode,
	FieldRegion,
	FieldStreetAddress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
