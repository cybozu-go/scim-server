// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "country", Type: field.TypeString, Nullable: true},
		{Name: "formatted", Type: field.TypeString, Nullable: true},
		{Name: "locality", Type: field.TypeString, Nullable: true},
		{Name: "postal_code", Type: field.TypeString, Nullable: true},
		{Name: "region", Type: field.TypeString, Nullable: true},
		{Name: "street_address", Type: field.TypeString, Nullable: true},
		{Name: "user_addresses", Type: field.TypeUUID, Nullable: true},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "addresses_users_addresses",
				Columns:    []*schema.Column{AddressesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EmailsColumns holds the columns for the "emails" table.
	EmailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString},
		{Name: "user_emails", Type: field.TypeUUID, Nullable: true},
	}
	// EmailsTable holds the schema information for the "emails" table.
	EmailsTable = &schema.Table{
		Name:       "emails",
		Columns:    EmailsColumns,
		PrimaryKey: []*schema.Column{EmailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "emails_users_emails",
				Columns:    []*schema.Column{EmailsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EntitlementsColumns holds the columns for the "entitlements" table.
	EntitlementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "user_entitlements", Type: field.TypeUUID, Nullable: true},
	}
	// EntitlementsTable holds the schema information for the "entitlements" table.
	EntitlementsTable = &schema.Table{
		Name:       "entitlements",
		Columns:    EntitlementsColumns,
		PrimaryKey: []*schema.Column{EntitlementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlements_users_entitlements",
				Columns:    []*schema.Column{EntitlementsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "external_id", Type: field.TypeString, Nullable: true},
		{Name: "etag", Type: field.TypeString},
		{Name: "group_children", Type: field.TypeUUID, Nullable: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "groups_groups_children",
				Columns:    []*schema.Column{GroupsColumns[4]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ImSsColumns holds the columns for the "im_ss" table.
	ImSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "user_imses", Type: field.TypeUUID, Nullable: true},
	}
	// ImSsTable holds the schema information for the "im_ss" table.
	ImSsTable = &schema.Table{
		Name:       "im_ss",
		Columns:    ImSsColumns,
		PrimaryKey: []*schema.Column{ImSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "im_ss_users_imses",
				Columns:    []*schema.Column{ImSsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NamesColumns holds the columns for the "names" table.
	NamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "family_name", Type: field.TypeString, Nullable: true},
		{Name: "formatted", Type: field.TypeString, Nullable: true},
		{Name: "given_name", Type: field.TypeString, Nullable: true},
		{Name: "honorific_prefix", Type: field.TypeString, Nullable: true},
		{Name: "honorific_suffix", Type: field.TypeString, Nullable: true},
		{Name: "middle_name", Type: field.TypeString, Nullable: true},
		{Name: "user_name", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// NamesTable holds the schema information for the "names" table.
	NamesTable = &schema.Table{
		Name:       "names",
		Columns:    NamesColumns,
		PrimaryKey: []*schema.Column{NamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "names_users_name",
				Columns:    []*schema.Column{NamesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PhoneNumbersColumns holds the columns for the "phone_numbers" table.
	PhoneNumbersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "user_phone_numbers", Type: field.TypeUUID, Nullable: true},
	}
	// PhoneNumbersTable holds the schema information for the "phone_numbers" table.
	PhoneNumbersTable = &schema.Table{
		Name:       "phone_numbers",
		Columns:    PhoneNumbersColumns,
		PrimaryKey: []*schema.Column{PhoneNumbersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "phone_numbers_users_phone_numbers",
				Columns:    []*schema.Column{PhoneNumbersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PhotosColumns holds the columns for the "photos" table.
	PhotosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "user_photos", Type: field.TypeUUID, Nullable: true},
	}
	// PhotosTable holds the schema information for the "photos" table.
	PhotosTable = &schema.Table{
		Name:       "photos",
		Columns:    PhotosColumns,
		PrimaryKey: []*schema.Column{PhotosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "photos_users_photos",
				Columns:    []*schema.Column{PhotosColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "user_roles", Type: field.TypeUUID, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "roles_users_roles",
				Columns:    []*schema.Column{RolesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "active", Type: field.TypeBool, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "external_id", Type: field.TypeString, Nullable: true},
		{Name: "locale", Type: field.TypeString, Nullable: true},
		{Name: "nick_name", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "preferred_language", Type: field.TypeString, Nullable: true},
		{Name: "profile_url", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "user_name", Type: field.TypeString, Unique: true},
		{Name: "user_type", Type: field.TypeString, Nullable: true},
		{Name: "etag", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// X509certificatesColumns holds the columns for the "x509certificates" table.
	X509certificatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display", Type: field.TypeString, Nullable: true},
		{Name: "primary", Type: field.TypeBool, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "user_x509certificates", Type: field.TypeUUID, Nullable: true},
	}
	// X509certificatesTable holds the schema information for the "x509certificates" table.
	X509certificatesTable = &schema.Table{
		Name:       "x509certificates",
		Columns:    X509certificatesColumns,
		PrimaryKey: []*schema.Column{X509certificatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "x509certificates_users_x509Certificates",
				Columns:    []*schema.Column{X509certificatesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserGroupsColumns holds the columns for the "user_groups" table.
	UserGroupsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "group_id", Type: field.TypeUUID},
	}
	// UserGroupsTable holds the schema information for the "user_groups" table.
	UserGroupsTable = &schema.Table{
		Name:       "user_groups",
		Columns:    UserGroupsColumns,
		PrimaryKey: []*schema.Column{UserGroupsColumns[0], UserGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_groups_user_id",
				Columns:    []*schema.Column{UserGroupsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_groups_group_id",
				Columns:    []*schema.Column{UserGroupsColumns[1]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		EmailsTable,
		EntitlementsTable,
		GroupsTable,
		ImSsTable,
		NamesTable,
		PhoneNumbersTable,
		PhotosTable,
		RolesTable,
		UsersTable,
		X509certificatesTable,
		UserGroupsTable,
	}
)

func init() {
	AddressesTable.ForeignKeys[0].RefTable = UsersTable
	EmailsTable.ForeignKeys[0].RefTable = UsersTable
	EntitlementsTable.ForeignKeys[0].RefTable = UsersTable
	GroupsTable.ForeignKeys[0].RefTable = GroupsTable
	ImSsTable.ForeignKeys[0].RefTable = UsersTable
	NamesTable.ForeignKeys[0].RefTable = UsersTable
	PhoneNumbersTable.ForeignKeys[0].RefTable = UsersTable
	PhotosTable.ForeignKeys[0].RefTable = UsersTable
	RolesTable.ForeignKeys[0].RefTable = UsersTable
	X509certificatesTable.ForeignKeys[0].RefTable = UsersTable
	UserGroupsTable.ForeignKeys[0].RefTable = UsersTable
	UserGroupsTable.ForeignKeys[1].RefTable = GroupsTable
}
