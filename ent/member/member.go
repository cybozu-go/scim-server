// Code generated by ent, DO NOT EDIT.

package member

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldDisplay holds the string denoting the display field in the database.
	FieldDisplay = "display"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the member in the database.
	Table = "members"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "members"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "group_members"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldValue,
	FieldDisplay,
	FieldType,
	FieldRef,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "members"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"group_members",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
