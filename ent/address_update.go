// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim-server/ent/address"
	"github.com/cybozu-go/scim-server/ent/predicate"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCountry sets the "country" field.
func (au *AddressUpdate) SetCountry(s string) *AddressUpdate {
	au.mutation.SetCountry(s)
	return au
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCountry(s *string) *AddressUpdate {
	if s != nil {
		au.SetCountry(*s)
	}
	return au
}

// ClearCountry clears the value of the "country" field.
func (au *AddressUpdate) ClearCountry() *AddressUpdate {
	au.mutation.ClearCountry()
	return au
}

// SetFormatted sets the "formatted" field.
func (au *AddressUpdate) SetFormatted(s string) *AddressUpdate {
	au.mutation.SetFormatted(s)
	return au
}

// SetNillableFormatted sets the "formatted" field if the given value is not nil.
func (au *AddressUpdate) SetNillableFormatted(s *string) *AddressUpdate {
	if s != nil {
		au.SetFormatted(*s)
	}
	return au
}

// ClearFormatted clears the value of the "formatted" field.
func (au *AddressUpdate) ClearFormatted() *AddressUpdate {
	au.mutation.ClearFormatted()
	return au
}

// SetLocality sets the "locality" field.
func (au *AddressUpdate) SetLocality(s string) *AddressUpdate {
	au.mutation.SetLocality(s)
	return au
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (au *AddressUpdate) SetNillableLocality(s *string) *AddressUpdate {
	if s != nil {
		au.SetLocality(*s)
	}
	return au
}

// ClearLocality clears the value of the "locality" field.
func (au *AddressUpdate) ClearLocality() *AddressUpdate {
	au.mutation.ClearLocality()
	return au
}

// SetPostalCode sets the "postalCode" field.
func (au *AddressUpdate) SetPostalCode(s string) *AddressUpdate {
	au.mutation.SetPostalCode(s)
	return au
}

// SetNillablePostalCode sets the "postalCode" field if the given value is not nil.
func (au *AddressUpdate) SetNillablePostalCode(s *string) *AddressUpdate {
	if s != nil {
		au.SetPostalCode(*s)
	}
	return au
}

// ClearPostalCode clears the value of the "postalCode" field.
func (au *AddressUpdate) ClearPostalCode() *AddressUpdate {
	au.mutation.ClearPostalCode()
	return au
}

// SetRegion sets the "region" field.
func (au *AddressUpdate) SetRegion(s string) *AddressUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (au *AddressUpdate) SetNillableRegion(s *string) *AddressUpdate {
	if s != nil {
		au.SetRegion(*s)
	}
	return au
}

// ClearRegion clears the value of the "region" field.
func (au *AddressUpdate) ClearRegion() *AddressUpdate {
	au.mutation.ClearRegion()
	return au
}

// SetStreetAddress sets the "streetAddress" field.
func (au *AddressUpdate) SetStreetAddress(s string) *AddressUpdate {
	au.mutation.SetStreetAddress(s)
	return au
}

// SetNillableStreetAddress sets the "streetAddress" field if the given value is not nil.
func (au *AddressUpdate) SetNillableStreetAddress(s *string) *AddressUpdate {
	if s != nil {
		au.SetStreetAddress(*s)
	}
	return au
}

// ClearStreetAddress clears the value of the "streetAddress" field.
func (au *AddressUpdate) ClearStreetAddress() *AddressUpdate {
	au.mutation.ClearStreetAddress()
	return au
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCountry,
		})
	}
	if au.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldCountry,
		})
	}
	if value, ok := au.mutation.Formatted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldFormatted,
		})
	}
	if au.mutation.FormattedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldFormatted,
		})
	}
	if value, ok := au.mutation.Locality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldLocality,
		})
	}
	if au.mutation.LocalityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldLocality,
		})
	}
	if value, ok := au.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPostalCode,
		})
	}
	if au.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldPostalCode,
		})
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldRegion,
		})
	}
	if au.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldRegion,
		})
	}
	if value, ok := au.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldStreetAddress,
		})
	}
	if au.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldStreetAddress,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetCountry sets the "country" field.
func (auo *AddressUpdateOne) SetCountry(s string) *AddressUpdateOne {
	auo.mutation.SetCountry(s)
	return auo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCountry(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCountry(*s)
	}
	return auo
}

// ClearCountry clears the value of the "country" field.
func (auo *AddressUpdateOne) ClearCountry() *AddressUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// SetFormatted sets the "formatted" field.
func (auo *AddressUpdateOne) SetFormatted(s string) *AddressUpdateOne {
	auo.mutation.SetFormatted(s)
	return auo
}

// SetNillableFormatted sets the "formatted" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableFormatted(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetFormatted(*s)
	}
	return auo
}

// ClearFormatted clears the value of the "formatted" field.
func (auo *AddressUpdateOne) ClearFormatted() *AddressUpdateOne {
	auo.mutation.ClearFormatted()
	return auo
}

// SetLocality sets the "locality" field.
func (auo *AddressUpdateOne) SetLocality(s string) *AddressUpdateOne {
	auo.mutation.SetLocality(s)
	return auo
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableLocality(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetLocality(*s)
	}
	return auo
}

// ClearLocality clears the value of the "locality" field.
func (auo *AddressUpdateOne) ClearLocality() *AddressUpdateOne {
	auo.mutation.ClearLocality()
	return auo
}

// SetPostalCode sets the "postalCode" field.
func (auo *AddressUpdateOne) SetPostalCode(s string) *AddressUpdateOne {
	auo.mutation.SetPostalCode(s)
	return auo
}

// SetNillablePostalCode sets the "postalCode" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillablePostalCode(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetPostalCode(*s)
	}
	return auo
}

// ClearPostalCode clears the value of the "postalCode" field.
func (auo *AddressUpdateOne) ClearPostalCode() *AddressUpdateOne {
	auo.mutation.ClearPostalCode()
	return auo
}

// SetRegion sets the "region" field.
func (auo *AddressUpdateOne) SetRegion(s string) *AddressUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableRegion(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetRegion(*s)
	}
	return auo
}

// ClearRegion clears the value of the "region" field.
func (auo *AddressUpdateOne) ClearRegion() *AddressUpdateOne {
	auo.mutation.ClearRegion()
	return auo
}

// SetStreetAddress sets the "streetAddress" field.
func (auo *AddressUpdateOne) SetStreetAddress(s string) *AddressUpdateOne {
	auo.mutation.SetStreetAddress(s)
	return auo
}

// SetNillableStreetAddress sets the "streetAddress" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableStreetAddress(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetStreetAddress(*s)
	}
	return auo
}

// ClearStreetAddress clears the value of the "streetAddress" field.
func (auo *AddressUpdateOne) ClearStreetAddress() *AddressUpdateOne {
	auo.mutation.ClearStreetAddress()
	return auo
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	var (
		err  error
		node *Address
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCountry,
		})
	}
	if auo.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldCountry,
		})
	}
	if value, ok := auo.mutation.Formatted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldFormatted,
		})
	}
	if auo.mutation.FormattedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldFormatted,
		})
	}
	if value, ok := auo.mutation.Locality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldLocality,
		})
	}
	if auo.mutation.LocalityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldLocality,
		})
	}
	if value, ok := auo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPostalCode,
		})
	}
	if auo.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldPostalCode,
		})
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldRegion,
		})
	}
	if auo.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldRegion,
		})
	}
	if value, ok := auo.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldStreetAddress,
		})
	}
	if auo.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldStreetAddress,
		})
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
