{{ define "dialect/sql/query/additional/load_user_groups" }}
	{{- if eq $.Name "User" }}

func recursiveLoadMembership(ctx context.Context, c *MemberClient, id string) ([]*Membership, error) {
	directs, err := c.Query().Where(member.Value(id)).WithGroup().All(ctx)
	if err != nil {
		return nil, fmt.Errorf(`failed to load group membership: %w`, err)
	}

	dl := len(directs)
	if dl == 0 {
		return nil, nil
	}

	res := make([]*Membership, 0, dl)
	for _, direct := range directs {
		res = append(res, &Membership{
			Value: direct.Edges.Group.ID.String(),
			Display: direct.Edges.Group.DisplayName,
			Ref: `https://foobar.com`,
			Type: `direct`,
		})

		children, err := recursiveLoadMembership(ctx, c, direct.Edges.Group.ID.String())
		if err != nil {
			return nil, fmt.Errorf(`failed to load children for %q: %w`, direct.Edges.Group.ID.String(), err)
		}
		if len(children) > 0 {
			res = append(res, children...)
		}
	}
	return res, nil
}

func LoadMembership(ctx context.Context, c *MemberClient, node *User) error {
	groups, err := recursiveLoadMembership(ctx, c,node.ID.String())
	if err != nil {
		return err
	}
	node.Groups = append(node.Groups, groups...)
	return nil
}
{{- end }}
{{ end }}

{{ define "dialect/sql/query/all/nodes/load_user_groups" }}
    {{- if eq $.Name "User" }}
	c := NewMemberClient(uq.config)
	for _, node := range nodes {
		if err := LoadMembership(ctx, c, node); err != nil {
			return nil, err
		}
	}
    {{- end }}
{{ end }}

{{ define "model/fields/additional" }}
    {{- if eq $.Name "User" }}
        // Groups contain the membership information about the groups that
	// this user directly or indirectly is part of. The membership
	// information _may_ be cached, and may take some time before
	// it is synchronized
        Groups []*Membership `json:"groups,omitempty"`
    {{- end }}
{{ end }}
